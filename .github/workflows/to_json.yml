name: Convert RYM Genre Hierarchy

on:
  push:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Convert hierarchy to JSON
        run: |
          cat > convert_rym_to_json.py <<'EOF'
          import json, re
          from typing import List, Tuple

          INPUT_PATH = "RateYourMusic Genre Hierarchy.txt"
          OUTPUT_PATH = "RateYourMusic Genre Hierarchy.json"
          SUFFIX_RE = re.compile(r"::.*$")

          def leading_spaces(s: str) -> int:
              s = s.replace("\t", "    ")
              return len(s) - len(s.lstrip(" "))

          def clean_name(raw: str) -> str:
              return SUFFIX_RE.sub("", raw.strip()).strip()

          def parse_lines(lines: List[str]):
              root = []
              stack: List[Tuple[int, list]] = [(-1, root)]
              for raw in lines:
                  if not raw.strip() or raw.lstrip().startswith("#"):
                      continue
                  indent = leading_spaces(raw)
                  name = clean_name(raw)
                  node = {"name": name, "children": []}
                  while stack and indent <= stack[-1][0]:
                      stack.pop()
                  stack[-1][1].append(node)
                  stack.append((indent, node["children"]))
              return root

          def prune_empty_children(obj):
              if isinstance(obj, list):
                  for item in obj:
                      prune_empty_children(item)
              elif isinstance(obj, dict):
                  if "children" in obj:
                      prune_empty_children(obj["children"])
                      if not obj["children"]:
                          obj.pop("children", None)

          def main():
              with open(INPUT_PATH, encoding="utf-8") as f:
                  lines = f.readlines()
              tree = parse_lines(lines)
              prune_empty_children(tree)
              with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
                  json.dump(tree, f, indent=2, ensure_ascii=False)
              print(f"Wrote {OUTPUT_PATH}")

          if __name__ == "__main__":
              main()
          EOF

          python3 convert_rym_to_json.py

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: rym-json-${{ github.run_number }}
          name: "RYM Genre Hierarchy Build ${{ github.run_number }}"
          body: "Automatically generated from latest RateYourMusic Genre Hierarchy.txt"
          draft: false
          prerelease: false
          files: |
            RateYourMusic Genre Hierarchy.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Convert RYM Genre Hierarchy

on:
  push:
    paths:
      - 'RateYourMusic Genre Hierarchy.txt'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Convert hierarchy to JSON
        run: |
          cat > convert_rym_to_json.py <<'EOF'
          import json, re
          from typing import List, Tuple

          INPUT_PATH = "RateYourMusic Genre Hierarchy.txt"
          OUTPUT_PATH = "RateYourMusic Genre Hierarchy.json"
          SUFFIX_RE = re.compile(r"::.*$")

          def leading_spaces(s: str) -> int:
              s = s.replace("\t", "    ")
              return len(s) - len(s.lstrip(" "))

          def clean_name(raw: str) -> str:
              return SUFFIX_RE.sub("", raw.strip()).strip()

          def parse_lines(lines: List[str]):
              root = []
              stack: List[Tuple[int, list]] = [(-1, root)]
              for raw in lines:
                  if not raw.strip() or raw.lstrip().startswith("#"):
                      continue
                  indent = leading_spaces(raw)
                  name = clean_name(raw)
                  node = {"name": name, "children": []}
                  while stack and indent <= stack[-1][0]:
                      stack.pop()
                  stack[-1][1].append(node)
                  stack.append((indent, node["children"]))
              return root

          def prune_empty_children(obj):
              if isinstance(obj, list):
                  for item in obj:
                      prune_empty_children(item)
              elif isinstance(obj, dict):
                  if "children" in obj:
                      prune_empty_children(obj["children"])
                      if not obj["children"]:
                          obj.pop("children", None)

          def main():
              with open(INPUT_PATH, encoding="utf-8") as f:
                  lines = f.readlines()
              tree = parse_lines(lines)
              prune_empty_children(tree)
              with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
                  json.dump(tree, f, indent=2, ensure_ascii=False)
              print(f"Wrote {OUTPUT_PATH}")

          if __name__ == "__main__":
              main()
          EOF

          python3 convert_rym_to_json.py

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: rym-json-${{ github.run_number }}
          name: "RYM Genre Hierarchy Build ${{ github.run_number }}"
          body: "Automatically generated from latest RateYourMusic Genre Hierarchy.txt"
          draft: false
          prerelease: false
          files: |
            RateYourMusic Genre Hierarchy.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Convert RYM Genre Hierarchy

on:
  push:
    paths:
      - 'RateYourMusic Genre Hierarchy.txt'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Convert hierarchy to JSON
        run: |
          cat > convert_rym_to_json.py <<'EOF'
          import json, re
          from typing import List, Tuple

          INPUT_PATH = "RateYourMusic Genre Hierarchy.txt"
          OUTPUT_PATH = "RateYourMusic Genre Hierarchy.json"
          SUFFIX_RE = re.compile(r"::.*$")

          def leading_spaces(s: str) -> int:
              s = s.replace("\t", "    ")
              return len(s) - len(s.lstrip(" "))

          def clean_name(raw: str) -> str:
              return SUFFIX_RE.sub("", raw.strip()).strip()

          def parse_lines(lines: List[str]):
              root = []
              stack: List[Tuple[int, list]] = [(-1, root)]
              for raw in lines:
                  if not raw.strip() or raw.lstrip().startswith("#"):
                      continue
                  indent = leading_spaces(raw)
                  name = clean_name(raw)
                  node = {"name": name, "children": []}
                  while stack and indent <= stack[-1][0]:
                      stack.pop()
                  stack[-1][1].append(node)
                  stack.append((indent, node["children"]))
              return root

          def prune_empty_children(obj):
              if isinstance(obj, list):
                  for item in obj:
                      prune_empty_children(item)
              elif isinstance(obj, dict):
                  if "children" in obj:
                      prune_empty_children(obj["children"])
                      if not obj["children"]:
                          obj.pop("children", None)

          def main():
              with open(INPUT_PATH, encoding="utf-8") as f:
                  lines = f.readlines()
              tree = parse_lines(lines)
              prune_empty_children(tree)
              with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
                  json.dump(tree, f, indent=2, ensure_ascii=False)
              print(f"Wrote {OUTPUT_PATH}")

          if __name__ == "__main__":
              main()
          EOF

          python3 convert_rym_to_json.py

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: rym-json-${{ github.run_number }}
          name: "RYM Genre Hierarchy Build ${{ github.run_number }}"
          body: "Automatically generated from latest RateYourMusic Genre Hierarchy.txt"
          draft: false
          prerelease: false
          files: |
            RateYourMusic Genre Hierarchy.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
